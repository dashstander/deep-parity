---
title: "Perceptron Parity"
author: "Dashiell Stander"
format:
    html:
        code-fold: true
jupyter: python3
---


# Mathematical Preliminaries

We are going to be talking about functions on the _boolean cube_ $\{ -1, \; 1\}^n$.

We will denote $[n] = \{1, 2, 3, \dots, n \}$.

One of the most important boolean functions is $\chi_S: \{ -1, \; 1 \}^n \rightarrow \{-1, 1 \}$. $\chi_S$ is the **parity** of $S$ which is a subset of $[n]$:

$$\chi_S(x) = \prod_{i \in S} x_i $$

$$ \chi_S(x) $$  counts the number of -1s in the $S$ indices of $x$. If there is an even number of -1s then we can pair them all off. Since $-1^2 = 1$, if there is an even number of -1s then $\chi_S(x) = 1$. If there's an odd number then of -1s then there is an extra -1 left over and $\chi_S(x) = -1$.

The traditional basis for functions $f: \{-1, \; 1 \}^n \rightarrow \mathbb{R} $ is the "indicator" basis. We can think of the majority function on $\{-1, \; 1 \}^3$ as a map from each element of  $\{-1, \; 1 \}^3$ like so:

\begin{align}
(1, 1, 1) &\mapsto 1 \\
(-1, 1, 1) &\mapsto 1 \\
(1, -1, 1) &\mapsto 1 \\
(-1, -1, 1) &\mapsto -1 \\
(1, 1, -1) &\mapsto 1 \\
(-1, 1, -1) &\mapsto -1 \\
(1, -1, -1) &\mapsto -1 \\
(-1, -1, -1) &\mapsto -1 \\
\end{align}

1. There are $2^n$ subsets of $[n]$ and 2^n el

```{ojs}
data = FileAttachment("palmer-penguins.csv").csv({ typed: true })
```

```{ojs}
viewof bill_length_min = Inputs.range(
  [32, 50], 
  {value: 35, step: 1, label: "Bill length (min):"}
)
viewof islands = Inputs.checkbox(
  ["Torgersen", "Biscoe", "Dream"], 
  { value: ["Torgersen", "Biscoe"], 
    label: "Islands:"
  }
)
```
```{ojs}
filtered = data.filter(function(penguin) {
  return bill_length_min < penguin.bill_length_mm &&
         islands.includes(penguin.island);
})
```
```{ojs}
Plot.rectY(filtered, 
  Plot.binX(
    {y: "count"}, 
    {x: "body_mass_g", fill: "species", thresholds: 20}
  ))
  .plot({
    facet: {
      data: filtered,
      x: "sex",
      y: "species",
      marginRight: 80
    },
    marks: [
      Plot.frame(),
    ]
  }
)
```